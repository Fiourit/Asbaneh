<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ASBANEH</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet" />
  <style>
    body {
      font-family: 'Roboto', sans-serif;
      text-align: center;
      background-color: #1e1e1e;
      margin: 0;
      padding: 2rem;
      color: white;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .container {
      display: flex;
      align-items: center;
      gap: 20px;
    }
    h1, select, button {
      margin-bottom: 20px;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(7, 60px);
      grid-template-rows: repeat(7, 60px);
      gap: 3px;
      background: #2c2c2c;
      padding: 10px;
      border-radius: 10px;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
    }
    .scoreboard {
      background: #333;
      padding: 15px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(255, 255, 0, 0.6);
      font-size: 20px;
      font-weight: bold;
      color: #ffcc00;
      text-align: center;
      width: 150px;
    }
    .cell {
      width: 60px;
      height: 60px;
      background-color: #444;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      cursor: pointer;
      transition: transform 0.2s ease-in-out, background-color 0.3s ease;
    }
    .cell:hover {
      transform: scale(1.2);
      background-color: #666;
    }
    .visited {
      background-color: rgba(50, 50, 50, 0.9) !important;
      animation: fadeIn 0.5s ease-in-out;
    }
    .knight {
      font-size: 40px;
      color: #ffcc00;
      transition: transform 0.3s ease-in-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    @keyframes bounce {
      0%, 20%, 50%, 80%, 100% {
        transform: translateY(0);
      }
      40% {
        transform: translateY(-30px);
      }
      60% {
        transform: translateY(-15px);
      }
    }
    .bounce {
      animation: bounce 2s infinite;
    }
    .blocked {
      background-color: #ff4444;
      pointer-events: none;
    }
    button {
      padding: 10px 20px;
      background: linear-gradient(135deg, #ffcc00, #ff9900);
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-weight: bold;
      transition: background 0.3s ease, transform 0.2s ease-in-out;
    }
    button:hover {
      background: linear-gradient(135deg, #ff9900, #ff6600);
      transform: scale(1.1);
    }
  </style>
</head>
<body>
  <h1>ASBANEH</h1>
  <label for="level">Choose Level:</label>
  <select id="level"></select>
  <button onclick="startGame()">Start Game</button>
  <div class="container">
    <div class="grid" id="grid"></div>
    <div class="scoreboard">Score: <span id="score">0</span></div>
  </div>
  <p id="message"></p>
  <audio id="knightMoveSound" src="knight-move.mp3"></audio>
  <audio id="gameOverSound" src="game-over.mp3"></audio>
  <script>
    const size = 7;
    const moves = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];
    let board, knightPos, knightPlaced = false, score = 0;

    window.onload = () => {
      const levelSelect = document.getElementById('level');
      for (let i = 1; i <= 10; i++) {
        const option = document.createElement('option');
        option.value = i;
        option.textContent = `Level ${i}`;
        levelSelect.appendChild(option);
      }
    };

    function startGame() {
      const level = parseInt(document.getElementById('level').value);
      board = Array.from({ length: size }, () => Array(size).fill(false));
      generateFixedObstacles(level);
      knightPos = null;
      knightPlaced = false;
      score = 0;
      updateScore();
      createGrid();
      document.getElementById('message').textContent = 'Click any non-blocked square to place the knight.';
    }

    function generateFixedObstacles(level) {
      let blocks = level * 2;
      let placed = 0;
      let positions = [];
      for (let r = 0; r < size; r++) {
        for (let c = 0; c < size; c++) {
          positions.push([r, c]);
        }
      }
      positions = positions.sort(() => Math.random() - 0.5);
      while (placed < blocks && positions.length > 0) {
        let [r, c] = positions.pop();
        board[r][c] = 'blocked';
        placed++;
      }
    }

    function createGrid() {
      const grid = document.getElementById('grid');
      grid.innerHTML = '';
      for (let r = 0; r < size; r++) {
        for (let c = 0; c < size; c++) {
          const cell = document.createElement('div');
          cell.classList.add('cell');
          if (board[r][c] === 'blocked') {
            cell.classList.add('blocked');
          }
          if (board[r][c] === 'visited') {
            cell.classList.add('visited');
          }
          if (knightPos && r === knightPos[0] && c === knightPos[1]) {
            cell.innerHTML = 'â™ž';
            cell.classList.add('knight');
          }
          cell.addEventListener('click', () => handleCellClick(r, c));
          grid.appendChild(cell);
        }
      }
    }

    function handleCellClick(r, c) {
      if (!knightPlaced && board[r][c] !== 'blocked') {
        knightPos = [r, c];
        knightPlaced = true;
        createGrid();
        document.getElementById('message').textContent = 'Knight placed! Click to move the knight.';
        playSound('knightMoveSound'); // Playing the knight move sound when the knight is placed
      } else if (isMoveValid(r, c)) {
        moveKnight(r, c);
      }
    }

    function moveKnight(r, c) {
      board[knightPos[0]][knightPos[1]] = 'visited';
      score++;
      updateScore();
      knightPos = [r, c];
      createGrid();
      playSound('knightMoveSound'); // Playing the knight move sound on each move
      if (!hasValidMoves()) {
        const message = document.getElementById('message');
        message.textContent = 'Game Over! No more legal moves.';
        message.classList.add('bounce');
        playSound('gameOverSound'); // Playing the game over sound
      }
    }

    function isMoveValid(r, c) {
      if (board[r][c] === 'blocked' || board[r][c] === 'visited') return false;
      const [kr, kc] = knightPos;
      return moves.some(([dr, dc]) => kr + dr === r && kc + dc === c);
    }

    function hasValidMoves() {
      const [kr, kc] = knightPos;
      return moves.some(([dr, dc]) => {
        const nr = kr + dr;
        const nc = kc + dc;
        return nr >= 0 && nr < size && nc >= 0 && nc < size && board[nr][nc] !== 'blocked' && board[nr][nc] !== 'visited';
      });
    }

    function updateScore() {
      document.getElementById('score').textContent = score;
    }

    function playSound(soundId) {
      const sound = document.getElementById(soundId);
      sound.play();
    }
  </script>
</body>
</html>
